#Core security properties

logout.success.url=/index.html
passwordSalt=secret-hash-salt=

# LDAP Connection Settings
ldap.base.provider.url=ldap://ldap-server-host:389
ldap.base.dn=DC=aims,DC=gov,DC=au
ldap.security.principal=CN=user???,CN=Users,DC=org,DC=au
ldap.security.credentials=password???

ldap.base.search.base=CN=Users
ldap.base.dn.pattern=CN={0},${ldap.base.search.base}
ldap.base.search.pattern=sAMAccountName={0}
#ldap.base.dn.pattern=sAMAccountName={0},${ldap.base.search.base}
#ldap.base.dn.pattern=mail={0},${ldap.base.search.base}



# Define if groups and profile information are imported from LDAP. If not, local database is used.
# When a new user connect first, the default profile is assigned. A user administrator can update
# privilege information.
ldap.privilege.import=true
# if ldap.privilege.import is true then specify whether existing user groups be retained (true) or
# whether all user groups should be removed (false)
ldap.privilege.keep.existing.usergroups=false

ldap.privilege.create.nonexisting.groups=true


# Define the way to extract profiles and privileges from the LDAP
# 1. Define one attribute for the profile and one for groups in config-security-overrides.properties

# 2. Define one attribute for the privilege and define a custom pattern (use LDAPUserDetailsContextMapperWithPattern in config-security.xml).
ldap.privilege.pattern=
#ldap.privilege.pattern=CAT_(.*)_(.*)
ldap.privilege.pattern.idx.group=1
ldap.privilege.pattern.idx.profil=2


# 3. Define custom location for extracting group and role (no support for group/role combination) (use LDAPUserDetailsContextMapperWithProfileSearch in config-security.xml).
ldap.privilege.search.group.attribute=CN
ldap.privilege.search.group.object=OU=Structure,OU=Corporate
ldap.privilege.search.group.query=(&(objectClass=*)(member=CN={0},${ldap.base.search.base},${ldap.base.dn})(cn=*))
ldap.privilege.search.group.pattern=
#MEST_Administrator MEST_Editor MEST_Guest MEST_RegisteredUser MEST_Reviewer MEST_UserAdmin +> DC: CN=MEST_UserAdmin,OU=Application Roles,OU=Corporate,DC=aims,DC=gov,DC=au
ldap.privilege.search.privilege.attribute=CN
ldap.privilege.search.privilege.object=OU=Application Roles,OU=Corporate
ldap.privilege.search.privilege.query=(&(objectClass=*)(member=CN={0},${ldap.base.search.base},${ldap.base.dn})(cn=MEST_*))
ldap.privilege.search.privilege.pattern=
ldap.privilege.search.privilege.prefix=MEST_
ldap.privilege.search.privilege.postfix=

# define user attribute mapping for LDAP user sync
ldapSynchronizer.jobDataAsMap.userAttributeMapping.dn=distinguishedName,
ldapSynchronizer.jobDataAsMap.userAttributeMapping.cn=cn,
ldapSynchronizer.jobDataAsMap.userAttributeMapping.name=givenName,
ldapSynchronizer.jobDataAsMap.userAttributeMapping.surname=sn,
ldapSynchronizer.jobDataAsMap.userAttributeMapping.mail=mail,
ldapSynchronizer.jobDataAsMap.userAttributeMapping.organisation=company,
ldapSynchronizer.jobDataAsMap.userAttributeMapping.kind=title,
ldapSynchronizer.jobDataAsMap.userAttributeMapping.address=,
ldapSynchronizer.jobDataAsMap.userAttributeMapping.zip=,
ldapSynchronizer.jobDataAsMap.userAttributeMapping.state=,
ldapSynchronizer.jobDataAsMap.userAttributeMapping.city=l,
ldapSynchronizer.jobDataAsMap.userAttributeMapping.country=,

# Run LDAP sync every day at 23:30
ldap.sync.cron=0 39 * * * ?
#ldap.sync.cron=0 * * * * ?
#ldap.sync.cron=0 0/1 * 1/1 * ? *
ldap.sync.startDelay=60000
ldap.sync.user.search.base=CN=Users
ldap.sync.user.search.filter=(&(mail=*@*)(sAMAccountName=*)(memberOf=CN=Staff,CN=Users,DC=org,DC=au))
ldap.sync.user.search.attribute=sAMAccountName
# enable if you want the account created in geonetwork for first time, if ldap acccount exists.
ldap.sync.user.CreateMissingAccounts=true
#OU=Structure,OU=Corporate,DC=aims,DC=gov,DC=au
ldap.sync.group.search.base=OU=Structure,OU=Corporate
ldap.sync.group.search.filter=(&(objectClass=*)(cn=*)(member=*))
ldap.sync.group.search.attribute=cn
ldap.sync.group.description.attribute=displayName
ldap.sync.group.search.pattern=

# CAS wants single result from filter
ldap.sync.user.cas.search.filter=(&(mail=*@*)(sAMAccountName={0}))

# either the hardcoded url to the server
# or if has the form @blah@ it will be replaced with
# the server details from the server configuration
geonetwork.https.url=https://geonetwork-host:8443/geonetwork

# CAS properties
cas.baseURL=https://cas-server-host:8443/cas-web
cas.ticket.validator.url=${cas.baseURL}
cas.login.url=${cas.baseURL}/login
cas.logout.url=${cas.baseURL}/logout?url=${geonetwork.https.url}/


